#include <iostream>
#include <thread>
#include <chrono>

// Метод для заполнения массива радномными числами.
void NewElements(int* array, int size)
{
    for (int i = 0; i < size; i++)
        array[i] = (rand() % 150 + 1) - 30;
}

// Метод возращает сумму массива, просто пробегая его.
int sumArrayLinear(int* array, int size)
{
    int result = 0;
    for (int i = 0; i < size; i++)
        result += array[i];
    return result;
}

// Метод, который суммирует с какого-то индекса 'k' до какого-то индекса 'm'.  
void sumArrayInParallel(int* array, int indexFirst, int indexSecond, int& sum)
{
    for (int i = indexFirst; i <= indexSecond; i++)
        sum += array[i];
}

int main()
{
    int size;
    std::cout << "Enter Array's size: ";
    std::cin >> size;
    int* array = new int[size];

    // Объявляем переменную сумма и индексы для метода параллельного суммирования.
    int sum = 0;
    int indexFirst = 0;
    int indexSecond = size / 2;
    int indexThird = indexSecond + 1;
    int indexFourth = size - 1;

    // Чтобы рандомные значения зависили от времени, без этого рандомные значения будут всегда одинаковыми.
    srand(time(0));

    NewElements(array, size);

    std::thread threadOne(sumArrayInParallel, array, indexFirst, indexSecond, std::ref(sum));
    std::thread threadSecond(sumArrayInParallel, array, indexThird, indexFourth, std::ref(sum));


    threadOne.detach();
    threadSecond.detach();

    // Чем больше массив, тем больше нужно указать значение тут.  
    std::this_thread::sleep_for(std::chrono::milliseconds(1000));

    std::cout << "The result of linear summation: " << sumArrayLinear(array, size) << std::endl;
    std::cout << "The result of parallel summation: " << sum << std::endl;
}
